#-----------------------------------------------
#   HCM benchmark (2022)       
#   Author: Pedro Barbosa
#
#   Script to compare performance
#   using fixed vs variable thresholds
#-----------------------------------------------
import argparse
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns 
import numpy as np

def generate_plot(df: pd.DataFrame):
    df['weighted_auROC'] = df.auROC * df.coverage
    
    target_cols = ['tool', 'Dataset', 'weighted_norm_mcc', 'weighted_accuracy', 'weighted_auROC']
    df = df[target_cols].copy()
    df['diff'] = df.weighted_auROC - df.weighted_norm_mcc
    na = df[df.isna().any(axis=1)]
    df = df.dropna()
    df = df.sort_values('diff', ascending=False)
    sns.set(rc={'figure.figsize':(7,6), 'patch.edgecolor': 'black'})
    sns.set_style(style="whitegrid")
    ax = sns.boxplot(x="diff", y="tool", data=df, color='lavender', whis=np.inf)
    ax = sns.stripplot(data=df, 
                  x="diff", 
                  y="tool", 
                  palette=['brown', 'slateblue', 'lightpink'],
                  jitter=0.05,
                  edgecolor="k", 
                  linewidth=1,
                  hue='Dataset')
    ax.grid(False)
    #ax.legend(loc='upper right', bbox_to_anchor=(1.02, 1))
    plt.ylabel('')
    plt.xlabel('weighted auROC - weighted normalized MCC')
    plt.tight_layout()
    plt.axvline(x=0, linestyle="--", color='grey')
    plt.savefig('out/plots/auROC_improvement.pdf')
    
def get_data(files: list, dataset_names: list = None):
    dfs = []
    for i, f in enumerate(files):
        _df = pd.read_csv(f, sep="\t")
        
        if dataset_names is not None:
            _df['Dataset'] = dataset_names[i]
        else:
            _df['Dataset'] = i
        
        dfs.append(_df)
    
    return pd.concat(dfs)
  
def main():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument(dest='metrics', nargs='+', help='Statistics file generated by a VETA run. Mininum of two files is required.')
    parser.add_argument('--dataset_names', nargs='+', help="Name of each dataset. Must correspond to the order of 'metrics' files")
    args = parser.parse_args()
    
    if args.dataset_names:
        if len(args.metrics) != len(args.dataset_names):
            raise ValueError("--dataset_names must have the same number of names as of the metrics files.")

    df = get_data(args.metrics, args.dataset_names)
    generate_plot(df)
    
if __name__ == "__main__":
    main()
